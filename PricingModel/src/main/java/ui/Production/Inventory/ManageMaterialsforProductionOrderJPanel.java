/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JPanel.java to edit this template
 */
package ui.Production.Inventory;

import java.util.ArrayList;
import javax.swing.JPanel;
import javax.swing.table.DefaultTableModel;
import model.BrandCompany.Order;
import model.Business.BrandEnterprise;
import model.Business.Business;
import model.Production.InventoryManagerProfile;
import model.Production.ProductionMode;
import model.Production.ProductionOrder;
import model.Production.ProductionOrderDirectory;

/**
 *
 * @author administratorzi
 */
public class ManageMaterialsforProductionOrderJPanel extends javax.swing.JPanel {

    javax.swing.JPanel cardSequencePanel;
    Business business;
    InventoryManagerProfile inventoryManagerprofile;
    String selectedMaterialStatus;
    BrandEnterprise brandCompany;
    ProductionOrderDirectory pod;
    ProductionOrder selectedProdutionOrder;
    /**
     * Creates new form ManageMaterialOrderJPanel
     */
    public ManageMaterialsforProductionOrderJPanel(JPanel cardSequencePanel, Business business,InventoryManagerProfile inventoryManagerprofile,BrandEnterprise brandCompany) {
        initComponents();
        this.business = business;
        this.cardSequencePanel = cardSequencePanel;
        this.inventoryManagerprofile = inventoryManagerprofile;
        this.brandCompany=brandCompany;
        this.pod=populatedAllBrandCompanyOrder();
        populateMaterialStatusCombo();
        selectedMaterialStatus = "all production orders";
        refreshTable();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane2 = new javax.swing.JScrollPane();
        tblMaterialInformation = new javax.swing.JTable();
        jLabel1 = new javax.swing.JLabel();
        cmbMaterialStatus = new javax.swing.JComboBox<>();
        jLabel2 = new javax.swing.JLabel();
        jButton1 = new javax.swing.JButton();
        jLabel3 = new javax.swing.JLabel();
        btnPutIntoProduction = new javax.swing.JButton();

        tblMaterialInformation.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null}
            },
            new String [] {
                "Production Order ID", "Material Name", "Material Price", "Quantity", "Material Status", "Warehouse Address", "Delivered Time", "production status"
            }
        ));
        tblMaterialInformation.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mousePressed(java.awt.event.MouseEvent evt) {
                tblMaterialInformationMousePressed(evt);
            }
        });
        jScrollPane2.setViewportView(tblMaterialInformation);

        jLabel1.setFont(new java.awt.Font("Arial", 0, 24)); // NOI18N
        jLabel1.setText("Manage Materials for Production Order");

        cmbMaterialStatus.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmbMaterialStatusActionPerformed(evt);
            }
        });

        jLabel2.setText("Material State: Material Order Not Placed/Material Order in Production/Material Order Delivered(when material delivered, the production order will automatically start producing)");

        jButton1.setText("Add WareHouse Address");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        jLabel3.setFont(new java.awt.Font("Dialog", 1, 14)); // NOI18N
        jLabel3.setText("Production Order Material Information");

        btnPutIntoProduction.setText("put into production line");
        btnPutIntoProduction.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnPutIntoProductionActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(cmbMaterialStatus, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jLabel2))
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jLabel3))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(250, 250, 250)
                        .addComponent(jLabel1))
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jButton1))
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(btnPutIntoProduction))
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 857, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(156, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(32, 32, 32)
                .addComponent(jLabel1)
                .addGap(12, 12, 12)
                .addComponent(cmbMaterialStatus, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel2)
                .addGap(45, 45, 45)
                .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 247, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(jButton1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(btnPutIntoProduction)
                .addContainerGap(332, Short.MAX_VALUE))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void cmbMaterialStatusActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmbMaterialStatusActionPerformed
        // TODO add your handling code here:
        if (cmbMaterialStatus.getSelectedItem() == null) return;
        selectedMaterialStatus = (String) cmbMaterialStatus.getSelectedItem();
        refreshTable();
    }//GEN-LAST:event_cmbMaterialStatusActionPerformed

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jButton1ActionPerformed

    private void btnPutIntoProductionActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnPutIntoProductionActionPerformed
        // TODO add your handling code here:
       selectedProdutionOrder.setProductionOrderStatus("in producing");
        refreshTable();
    }//GEN-LAST:event_btnPutIntoProductionActionPerformed

    private void tblMaterialInformationMousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tblMaterialInformationMousePressed
        // TODO add your handling code here:
        int size = tblMaterialInformation.getRowCount();
        int selectedrow = tblMaterialInformation.getSelectionModel().getLeadSelectionIndex();

        if (selectedrow < 0 || selectedrow > size - 1) {
            return;
        }
        selectedProdutionOrder = ((ProductionOrder) tblMaterialInformation.getValueAt(selectedrow, 0));
        if (selectedProdutionOrder == null) {
            return;
        }
    }//GEN-LAST:event_tblMaterialInformationMousePressed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnPutIntoProduction;
    private javax.swing.JComboBox<String> cmbMaterialStatus;
    private javax.swing.JButton jButton1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JTable tblMaterialInformation;
    // End of variables declaration//GEN-END:variables

    private void populateMaterialStatusCombo() {
        cmbMaterialStatus.removeAllItems();
        cmbMaterialStatus.addItem("all production orders");
        cmbMaterialStatus.addItem("material not arrived");
        cmbMaterialStatus.addItem("material arrived");
        
    }

    private void refreshTable() {
        int rc = tblMaterialInformation.getRowCount();
        int i;
        for (i = rc - 1; i >= 0; i--) {
            ((DefaultTableModel) tblMaterialInformation.getModel()).removeRow(i);
        }

        //ProductionOrderDirectory pod = inventoryManagerprofile.getInventoryOrganization().getProductionEnterprise().getProductionOrderDirectory();
        if (selectedMaterialStatus.equals("all production orders")){
            for (ProductionOrder productionOrder : pod.getProductionOrderList()) {
              Object[] row = new Object[8];
              row[0] = productionOrder;
              row[1] = productionOrder.getOrder().getRawMaterial();
              row[2] = productionOrder.getOrder().getRawMaterial().getPrice();
              row[3] = productionOrder.getOrder().getQuantity();
              row[4] = productionOrder.getRawMaterialOrder().getDeliverStatus();
              row[5] = productionOrder.getRawMaterialOrder().getProductionEnterpriseWarehouseAddress();
              row[6] = productionOrder.getRawMaterialOrder().getDeliveryDate(); 
              row[7]= productionOrder.getProductionOrderStatus();
              ((DefaultTableModel) tblMaterialInformation.getModel()).addRow(row);
            }
        }
        
        if(selectedMaterialStatus.equals("material not arrived")){
            for (ProductionOrder productionOrder : pod.getProductionOrderList()) {
                if(productionOrder.getRawMaterialOrder().getDeliverStatus().equals("Not delivered")){
                    Object[] row = new Object[8];
                    row[0] = productionOrder;
                    row[1] = productionOrder.getOrder().getRawMaterial();
                    row[2] = productionOrder.getOrder().getRawMaterial().getPrice();
                    row[3] = productionOrder.getOrder().getQuantity();
                    row[4] = productionOrder.getRawMaterialOrder().getDeliverStatus();
                    row[5] = productionOrder.getRawMaterialOrder().getDeliverStatus();
                    row[6] = productionOrder.getRawMaterialOrder().getDeliveryDate();
                    row[7]= productionOrder.getProductionOrderStatus();
                    ((DefaultTableModel) tblMaterialInformation.getModel()).addRow(row);
            }
            }  
        }
        
        if(selectedMaterialStatus.equals("material arrived")){
            for (ProductionOrder productionOrder : pod.getProductionOrderList()) {
                if(!productionOrder.getRawMaterialOrder().getDeliverStatus().equals("Not delivered")){
                    Object[] row = new Object[8];
                    row[0] = productionOrder;
                    row[1] = productionOrder.getOrder().getRawMaterial();
                    row[2] = productionOrder.getOrder().getRawMaterial().getPrice();
                    row[3] = productionOrder.getOrder().getQuantity();
                    row[4] = productionOrder.getRawMaterialOrder().getDeliverStatus();
                    row[5] = productionOrder.getRawMaterialOrder().getDeliverStatus();
                    row[6] = productionOrder.getRawMaterialOrder().getDeliveryDate(); 
                    row[7]= productionOrder.getProductionOrderStatus();
                    ((DefaultTableModel) tblMaterialInformation.getModel()).addRow(row);}
            }
            
        }
    }

    private ProductionOrderDirectory populatedAllBrandCompanyOrder() {
        ProductionOrderDirectory pod = inventoryManagerprofile.getInventoryOrganization().getProductionEnterprise().getProductionOrderDirectory();
        for(Order order:brandCompany.getProcurementOrganization().getOrderDirectory().getOrderDirectory()){
           pod.addProductionOrder(order,order.getRawMarerialOrder());
        }
        return pod;
    }
    
   
}

