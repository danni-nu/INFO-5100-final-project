/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JPanel.java to edit this template
 */
package ui.BrandCompany.Procurer;

import java.awt.CardLayout;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.table.DefaultTableModel;
import model.BrandCompany.Order;
import model.BrandCompany.ProcurerProfile;
import model.BrandCompany.Requirement;
import model.Business.BrandEnterprise;
import model.Business.Business;
import model.Production.ProductionOrder;
import model.Production.ProductionOrderDirectory;
import model.Production.ProductionOrganization;
import model.RawMaterialEnterprise.RawMaterialOrder;
import model.RawMaterialEnterprise.RawMaterialOrderDirectory;

/**
 *
 * @author qiaohui
 */
public class ManageOrderJPanel extends javax.swing.JPanel {

    /**
     * Creates new form ManageOrder
     */
    JPanel workArea;
    ProcurerProfile procurerProfile;
    Business b;
    BrandEnterprise brandCompany;
    
    
    public ManageOrderJPanel(Business b, ProcurerProfile procurer, JPanel workArea,BrandEnterprise brandCompany) {
        initComponents();
        this.b=b;
        this.procurerProfile=procurer;
        this.workArea=workArea;
        this.brandCompany=brandCompany;
        populateRequirementTable();
        populateUnplacedOrderTable();
        populateOrderList();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        btnBack = new javax.swing.JButton();
        btnCheckUnfinishedOrder = new javax.swing.JButton();
        btnCheckOrderDetail = new javax.swing.JButton();
        BbtnCreateNewOrder = new javax.swing.JButton();
        lblTitle = new javax.swing.JLabel();
        jScrollPane2 = new javax.swing.JScrollPane();
        tblOrderDetailStatus = new javax.swing.JTable();
        btnRequestCancelOrder = new javax.swing.JButton();
        lblquantity = new javax.swing.JLabel();
        jButton6 = new javax.swing.JButton();
        jScrollPane4 = new javax.swing.JScrollPane();
        tblRequiementList = new javax.swing.JTable();
        spnQuantity = new javax.swing.JSpinner();
        lblOrderTotal = new javax.swing.JLabel();
        lblOrderCost = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        tablOrderList = new javax.swing.JTable();

        setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        btnBack.setText(">>Back");
        btnBack.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnBackActionPerformed(evt);
            }
        });
        add(btnBack, new org.netbeans.lib.awtextra.AbsoluteConstraints(14, 15, -1, -1));

        btnCheckUnfinishedOrder.setText("Check Unfinished Order");
        btnCheckUnfinishedOrder.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnCheckUnfinishedOrderActionPerformed(evt);
            }
        });
        add(btnCheckUnfinishedOrder, new org.netbeans.lib.awtextra.AbsoluteConstraints(570, 310, -1, -1));

        btnCheckOrderDetail.setText("Check Order Detail");
        btnCheckOrderDetail.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnCheckOrderDetailActionPerformed(evt);
            }
        });
        add(btnCheckOrderDetail, new org.netbeans.lib.awtextra.AbsoluteConstraints(566, 274, 170, 20));

        BbtnCreateNewOrder.setText("Create New Order");
        BbtnCreateNewOrder.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                BbtnCreateNewOrderActionPerformed(evt);
            }
        });
        add(BbtnCreateNewOrder, new org.netbeans.lib.awtextra.AbsoluteConstraints(400, 350, 160, 20));

        lblTitle.setText("Order Management");
        add(lblTitle, new org.netbeans.lib.awtextra.AbsoluteConstraints(305, 18, -1, -1));

        tblOrderDetailStatus.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null}
            },
            new String [] {
                "OrderID", "Order Status", "MaterialOrder ID", "Order Status", "ProductionOrder ID", "Order Status", "Deliver TIme"
            }
        ));
        jScrollPane2.setViewportView(tblOrderDetailStatus);

        add(jScrollPane2, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 460, 700, 180));

        btnRequestCancelOrder.setText("Request Cancel Order");
        add(btnRequestCancelOrder, new org.netbeans.lib.awtextra.AbsoluteConstraints(570, 650, -1, -1));

        lblquantity.setText("Quantiy:");
        add(lblquantity, new org.netbeans.lib.awtextra.AbsoluteConstraints(410, 270, 59, 23));

        jButton6.setText("Check Unplaced Order");
        add(jButton6, new org.netbeans.lib.awtextra.AbsoluteConstraints(570, 350, -1, -1));

        tblRequiementList.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null}
            },
            new String [] {
                "RequirementsID", "RawMaterial", "OrderProductionMode", "Designer", "Style", "Color", "DeadLine", "Message"
            }
        ));
        jScrollPane4.setViewportView(tblRequiementList);

        add(jScrollPane4, new org.netbeans.lib.awtextra.AbsoluteConstraints(14, 64, 722, 183));
        add(spnQuantity, new org.netbeans.lib.awtextra.AbsoluteConstraints(470, 270, -1, -1));

        lblOrderTotal.setText("Order Total:");
        add(lblOrderTotal, new org.netbeans.lib.awtextra.AbsoluteConstraints(410, 310, -1, 23));

        lblOrderCost.setText("<Cost>");
        add(lblOrderCost, new org.netbeans.lib.awtextra.AbsoluteConstraints(490, 310, -1, 23));

        tablOrderList.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Order ID", "Quantity", "Requirement Creater", "Order Creater"
            }
        ));
        jScrollPane1.setViewportView(tablOrderList);

        add(jScrollPane1, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 270, 380, 150));
    }// </editor-fold>//GEN-END:initComponents

    private void btnBackActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnBackActionPerformed
        // TODO add your handling code here:
        workArea.remove(this);
        CardLayout layout =(CardLayout)workArea.getLayout();
        layout.next(workArea);
    }//GEN-LAST:event_btnBackActionPerformed

    private void BbtnCreateNewOrderActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_BbtnCreateNewOrderActionPerformed
        // TODO add your handling code here:
        int selectedRowIndex = tblRequiementList.getSelectedRow();
        if (selectedRowIndex < 0) {
            JOptionPane.showMessageDialog(null, "Please select a row!!", "Warning", JOptionPane.WARNING_MESSAGE);
        }    
        Requirement requirement = (Requirement) tblRequiementList.getValueAt(selectedRowIndex, 0);
        int quantity=(Integer)spnQuantity.getValue();
        if(quantity==0){
        JOptionPane.showMessageDialog(this, "Please check quantity!Order quantity cannot be 0", "Info", JOptionPane.INFORMATION_MESSAGE);
            return;
        }
        requirement.addNewOrderToRequirement(requirement, quantity);
        JOptionPane.showMessageDialog(this, "Your order was successfully placed!", "Info", JOptionPane.INFORMATION_MESSAGE);
    }//GEN-LAST:event_BbtnCreateNewOrderActionPerformed

    private void btnCheckOrderDetailActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnCheckOrderDetailActionPerformed
        // TODO add your handling code here:
        int selectedRowIndex = tblRequiementList.getSelectedRow();
        if (selectedRowIndex < 0) {
            JOptionPane.showMessageDialog(null, "Please select a row!!", "Warning", JOptionPane.WARNING_MESSAGE);
        }    
        Requirement requirement = (Requirement) tblRequiementList.getValueAt(selectedRowIndex, 0);
        populateOrderDetailStatus(requirement);
        populateOrderList(requirement);
    }//GEN-LAST:event_btnCheckOrderDetailActionPerformed

    private void btnCheckUnfinishedOrderActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnCheckUnfinishedOrderActionPerformed
        // TODO add your handling code here:
        populateUnplacedOrderTable();
    }//GEN-LAST:event_btnCheckUnfinishedOrderActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton BbtnCreateNewOrder;
    private javax.swing.JButton btnBack;
    private javax.swing.JButton btnCheckOrderDetail;
    private javax.swing.JButton btnCheckUnfinishedOrder;
    private javax.swing.JButton btnRequestCancelOrder;
    private javax.swing.JButton jButton6;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane4;
    private javax.swing.JLabel lblOrderCost;
    private javax.swing.JLabel lblOrderTotal;
    private javax.swing.JLabel lblTitle;
    private javax.swing.JLabel lblquantity;
    private javax.swing.JSpinner spnQuantity;
    private javax.swing.JTable tablOrderList;
    private javax.swing.JTable tblOrderDetailStatus;
    private javax.swing.JTable tblRequiementList;
    // End of variables declaration//GEN-END:variables
    
    
    
    private void populateRequirementTable() {
        DefaultTableModel model = (DefaultTableModel) tblRequiementList.getModel();
        model.setRowCount(0);
        for(Requirement re:brandCompany.getProductPlanningOrganization().getRequirementDirectory().getRequirementsDirectory()){
            Object row[] = new Object[8];
            row[0] = re;
            row[1] = re.getRowMaterial();
            row[2] = re.getProductionMode();
            row[3] = re.getDesignerProfile().getPerson().getPersonName();
            row[4] = re.getStyle();
            row[5] = re.getColor();
            row[6] = re.getDeadline();
            row[7] = re.getRequirementstatus();
            model.addRow(row);
            }
        
    }


    private void populateUnplacedOrderTable() {
        DefaultTableModel model = (DefaultTableModel) tblOrderDetailStatus.getModel();
        model.setRowCount(0);
        for(Requirement re:brandCompany.getProductPlanningOrganization().getRequirementDirectory().getRequirementsDirectory()){
            for(Order order:re.getRequirementOrderList()){
            Object row[] = new Object[7];
            row[0] = order;
            row[1] = order.getOrderstatus();
            row[2] = order.getRawMarerialOrder();
            row[3] = order.getRawMarerialOrder().getDeliverStatus();
            row[4] = order.getProductOrder();
            row[5] = order.getProductOrder().getProductionOrderStatus();
            row[6] = order.getRawMarerialOrder().getDeliveryDate();
            model.addRow(row);
            }
            }
    }

    private void populateOrderDetailStatus(Requirement requirement) {
        DefaultTableModel model = (DefaultTableModel) tblOrderDetailStatus.getModel();
        model.setRowCount(0);
        for(Order order:requirement.getRequirementOrderList()){
            Object row[] = new Object[7];
            row[0] = order;
            row[1] = order.getOrderstatus();
            row[2] = order.getRawMarerialOrder();
            row[3] = order.getRawMarerialOrder().getDeliverStatus();
            row[4] = order.getProductOrder();
            row[5] = order.getProductOrder().getProductionOrderStatus();
            row[6] = order.getRawMarerialOrder().getDeliveryDate();
            model.addRow(row);
            }
    }

    private void populateOrderList() {
        DefaultTableModel model = (DefaultTableModel) tablOrderList.getModel();
        model.setRowCount(0);
        for(Requirement re:brandCompany.getProductPlanningOrganization().getRequirementDirectory().getRequirementsDirectory()){
            for(Order order:re.getRequirementOrderList()){
                Object row[] = new Object[4];
                row[0] = order;
                row[1] = order.getQuantity();
                row[2] = order.getOrderPrice();
                row[3] = order.getOrderMessage();
                model.addRow(row);
                }
            }
    }

    private void populateOrderList(Requirement requirement) {
       DefaultTableModel model = (DefaultTableModel) tablOrderList.getModel();
        model.setRowCount(0);
       
        for(Order order:requirement.getRequirementOrderList()){
            Object row[] = new Object[4];
            row[0] = order;
            row[1] = order.getQuantity();
            row[2] = order.getOrderPrice();
            row[3] = order.getOrderMessage();
            model.addRow(row);
            }
           
    }
  
}
