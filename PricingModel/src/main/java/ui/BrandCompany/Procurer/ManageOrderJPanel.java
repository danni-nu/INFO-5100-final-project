/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JPanel.java to edit this template
 */
package ui.BrandCompany.Procurer;

import java.awt.CardLayout;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.table.DefaultTableModel;
import model.BrandCompany.Order;
import model.BrandCompany.OrderDirectory;
import model.BrandCompany.ProcurerProfile;
import model.BrandCompany.Requirement;
import model.Business.BrandEnterprise;
import model.Business.Business;
import model.Business.ProductionEnterprise;
import model.Production.ProductionOrder;
import model.Production.ProductionOrderDirectory;
import model.Production.ProductionOrganization;
import model.RawMaterialEnterprise.RawMaterialOrder;
import model.RawMaterialEnterprise.RawMaterialOrderDirectory;

/**
 *
 * @author qiaohui
 */
public class ManageOrderJPanel extends javax.swing.JPanel {

    /**
     * Creates new form ManageOrder
     */
    JPanel workArea;
    ProcurerProfile procurerProfile;
    Business b;
    BrandEnterprise brandCompany;
    ProductionEnterprise selectedProductionEnterprise;
    
    public ManageOrderJPanel(Business b, ProcurerProfile procurer, JPanel workArea,BrandEnterprise brandCompany) {
        initComponents();
        this.b=b;
        this.procurerProfile=procurer;
        this.workArea=workArea;
        this.brandCompany=brandCompany;
        populateRequirementTable();
        populateUnplacedOrderTable();
        populateOrderList();
        populateProductionCompanyCombo();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        btnBack = new javax.swing.JButton();
        btnCheckUnfinishedOrder = new javax.swing.JButton();
        btnCheckOrderDetail = new javax.swing.JButton();
        BbtnCreateNewOrder = new javax.swing.JButton();
        lblTitle = new javax.swing.JLabel();
        jScrollPane2 = new javax.swing.JScrollPane();
        tblOrderDetailStatus = new javax.swing.JTable();
        lblquantity = new javax.swing.JLabel();
        btnCheckUnplacedOrder = new javax.swing.JButton();
        jScrollPane4 = new javax.swing.JScrollPane();
        tblRequiementList = new javax.swing.JTable();
        spnQuantity = new javax.swing.JSpinner();
        lblOrderTotal = new javax.swing.JLabel();
        lblOrderCost = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        tablOrderList = new javax.swing.JTable();
        cmbProductionCompany = new javax.swing.JComboBox<>();
        btnCheckRequirementUnfinishedDetail = new javax.swing.JButton();
        lblOrderTotal1 = new javax.swing.JLabel();
        txtMessage = new javax.swing.JTextField();

        setBackground(new java.awt.Color(214, 219, 203));
        setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        btnBack.setBackground(new java.awt.Color(237, 209, 182));
        btnBack.setText(">>Back");
        btnBack.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnBackActionPerformed(evt);
            }
        });
        add(btnBack, new org.netbeans.lib.awtextra.AbsoluteConstraints(14, 15, -1, -1));

        btnCheckUnfinishedOrder.setBackground(new java.awt.Color(237, 209, 182));
        btnCheckUnfinishedOrder.setText("Check Unfinished Order");
        btnCheckUnfinishedOrder.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnCheckUnfinishedOrderActionPerformed(evt);
            }
        });
        add(btnCheckUnfinishedOrder, new org.netbeans.lib.awtextra.AbsoluteConstraints(200, 60, -1, -1));

        btnCheckOrderDetail.setBackground(new java.awt.Color(237, 209, 182));
        btnCheckOrderDetail.setText("Check Order Detail");
        btnCheckOrderDetail.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnCheckOrderDetailActionPerformed(evt);
            }
        });
        add(btnCheckOrderDetail, new org.netbeans.lib.awtextra.AbsoluteConstraints(340, 280, 170, 20));

        BbtnCreateNewOrder.setBackground(new java.awt.Color(237, 209, 182));
        BbtnCreateNewOrder.setText("Create New Order");
        BbtnCreateNewOrder.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                BbtnCreateNewOrderActionPerformed(evt);
            }
        });
        add(BbtnCreateNewOrder, new org.netbeans.lib.awtextra.AbsoluteConstraints(410, 450, 150, 20));

        lblTitle.setText("Order Management");
        add(lblTitle, new org.netbeans.lib.awtextra.AbsoluteConstraints(305, 18, -1, -1));

        tblOrderDetailStatus.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null}
            },
            new String [] {
                "OrderID", "Order Status", "MaterialOrder ID", "Order Status", "ProductionOrder ID", "Order Status", "Deliver TIme"
            }
        ));
        jScrollPane2.setViewportView(tblOrderDetailStatus);

        add(jScrollPane2, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 490, 730, 150));

        lblquantity.setText("Quantiy:");
        add(lblquantity, new org.netbeans.lib.awtextra.AbsoluteConstraints(410, 330, 59, 23));

        btnCheckUnplacedOrder.setBackground(new java.awt.Color(237, 209, 182));
        btnCheckUnplacedOrder.setText("Check Unplaced Order");
        btnCheckUnplacedOrder.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnCheckUnplacedOrderActionPerformed(evt);
            }
        });
        add(btnCheckUnplacedOrder, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 60, -1, -1));

        tblRequiementList.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null}
            },
            new String [] {
                "RequirementsID", "RawMaterial", "OrderProductionMode", "Designer", "Style", "Color", "DeadLine", "Status"
            }
        ));
        jScrollPane4.setViewportView(tblRequiementList);

        add(jScrollPane4, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 90, 722, 183));

        spnQuantity.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                spnQuantityMouseClicked(evt);
            }
        });
        add(spnQuantity, new org.netbeans.lib.awtextra.AbsoluteConstraints(470, 330, 80, 20));

        lblOrderTotal.setText("Message:");
        add(lblOrderTotal, new org.netbeans.lib.awtextra.AbsoluteConstraints(410, 380, -1, 23));

        lblOrderCost.setText("<Cost>");
        add(lblOrderCost, new org.netbeans.lib.awtextra.AbsoluteConstraints(570, 360, -1, 23));

        tablOrderList.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Order ID", "Quantity", "Order Price", "Order Creater"
            }
        ));
        jScrollPane1.setViewportView(tablOrderList);

        add(jScrollPane1, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 320, 380, 150));

        cmbProductionCompany.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmbProductionCompanyActionPerformed(evt);
            }
        });
        add(cmbProductionCompany, new org.netbeans.lib.awtextra.AbsoluteConstraints(570, 330, 150, 20));

        btnCheckRequirementUnfinishedDetail.setBackground(new java.awt.Color(237, 209, 182));
        btnCheckRequirementUnfinishedDetail.setText("Requirement unfinished Order");
        btnCheckRequirementUnfinishedDetail.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnCheckRequirementUnfinishedDetailActionPerformed(evt);
            }
        });
        add(btnCheckRequirementUnfinishedDetail, new org.netbeans.lib.awtextra.AbsoluteConstraints(530, 280, 210, 20));

        lblOrderTotal1.setText("Order Total:");
        add(lblOrderTotal1, new org.netbeans.lib.awtextra.AbsoluteConstraints(410, 360, -1, 23));
        add(txtMessage, new org.netbeans.lib.awtextra.AbsoluteConstraints(410, 410, 330, 20));
    }// </editor-fold>//GEN-END:initComponents

    private void btnBackActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnBackActionPerformed
        // TODO add your handling code here:
      
        workArea.remove(this);
        CardLayout layout =(CardLayout)workArea.getLayout();
        layout.next(workArea);
    }//GEN-LAST:event_btnBackActionPerformed

    private void BbtnCreateNewOrderActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_BbtnCreateNewOrderActionPerformed
        // TODO add your handling code here:
        int selectedRowIndex = tblRequiementList.getSelectedRow();
        if (selectedRowIndex < 0) {
            JOptionPane.showMessageDialog(null, "Please select a row!!", "Warning", JOptionPane.WARNING_MESSAGE);
        }    
        Requirement requirement = (Requirement) tblRequiementList.getValueAt(selectedRowIndex, 0);
        int quantity=(Integer)spnQuantity.getValue();
        if(quantity==0){
        JOptionPane.showMessageDialog(this, "Please check quantity!Order quantity cannot be 0", "Info", JOptionPane.INFORMATION_MESSAGE);
            return;
        }
        OrderDirectory orderdirectory=brandCompany.getProcurementOrganization().getOrderDirectory();
        Order order=orderdirectory.addNewOrder(requirement, quantity);
        selectedProductionEnterprise.getProductionOrderDirectory().getProductionOrderList().add(order.getProductOrder());
        //requirement.setOrderToAssignment(order);
        order.setOrderPrice(requirement.getDesignerProfile().getDefaultDesignPricing()+requirement.getProductionMode().getModePrice()+requirement.getRowMaterial().getPrice());
        order.getProductOrder().setMessage(txtMessage.getText());
        JOptionPane.showMessageDialog(this, "Your order was successfully placed!", "Info", JOptionPane.INFORMATION_MESSAGE);
        populateOrderDetailStatus(requirement);
        populateOrderList(requirement);
    }//GEN-LAST:event_BbtnCreateNewOrderActionPerformed

    private void btnCheckOrderDetailActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnCheckOrderDetailActionPerformed
        // TODO add your handling code here:
        int selectedRowIndex = tblRequiementList.getSelectedRow();
        if (selectedRowIndex < 0) {
            JOptionPane.showMessageDialog(null, "Please select a row!!", "Warning", JOptionPane.WARNING_MESSAGE);
        }    
        Requirement requirement = (Requirement) tblRequiementList.getValueAt(selectedRowIndex, 0);
        populateOrderDetailStatus(requirement);
        populateOrderList(requirement);
    }//GEN-LAST:event_btnCheckOrderDetailActionPerformed

    private void btnCheckUnfinishedOrderActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnCheckUnfinishedOrderActionPerformed
        // TODO add your handling code here:
        populateUnfinishedOrderDetailsTable();
    }//GEN-LAST:event_btnCheckUnfinishedOrderActionPerformed

    private void spnQuantityMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_spnQuantityMouseClicked
        // TODO add your handling code here:
        int selectedRowIndex = tblRequiementList.getSelectedRow();
        if (selectedRowIndex < 0) {
            JOptionPane.showMessageDialog(null, "Please select a row!!", "Warning", JOptionPane.WARNING_MESSAGE);
        }    
        Requirement requirement = (Requirement) tblRequiementList.getValueAt(selectedRowIndex, 0);
        lblOrderCost.setText(String.valueOf(requirement.getDesignerProfile().getDefaultDesignPricing()+requirement.getProductionMode().getModePrice()+requirement.getRowMaterial().getPrice()));
    }//GEN-LAST:event_spnQuantityMouseClicked

    private void btnCheckUnplacedOrderActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnCheckUnplacedOrderActionPerformed
        // TODO add your handling code here:
        populateUnplacedOrderReuiqrementTable();
          
    }//GEN-LAST:event_btnCheckUnplacedOrderActionPerformed

    private void cmbProductionCompanyActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmbProductionCompanyActionPerformed
        // TODO add your handling code here:
        if (cmbProductionCompany.getSelectedItem() == null) return;
        selectedProductionEnterprise = (ProductionEnterprise) cmbProductionCompany.getSelectedItem();
        
    }//GEN-LAST:event_cmbProductionCompanyActionPerformed

    private void btnCheckRequirementUnfinishedDetailActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnCheckRequirementUnfinishedDetailActionPerformed
        // TODO add your handling code here:
        int selectedRowIndex = tblRequiementList.getSelectedRow();
        if (selectedRowIndex < 0) {
            JOptionPane.showMessageDialog(null, "Please select a row!!", "Warning", JOptionPane.WARNING_MESSAGE);
        }    
        Requirement requirement = (Requirement) tblRequiementList.getValueAt(selectedRowIndex, 0);
        populateRequirementUnfinishedOrderDetailsTable(requirement);
        
    }//GEN-LAST:event_btnCheckRequirementUnfinishedDetailActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton BbtnCreateNewOrder;
    private javax.swing.JButton btnBack;
    private javax.swing.JButton btnCheckOrderDetail;
    private javax.swing.JButton btnCheckRequirementUnfinishedDetail;
    private javax.swing.JButton btnCheckUnfinishedOrder;
    private javax.swing.JButton btnCheckUnplacedOrder;
    private javax.swing.JComboBox<ProductionEnterprise> cmbProductionCompany;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane4;
    private javax.swing.JLabel lblOrderCost;
    private javax.swing.JLabel lblOrderTotal;
    private javax.swing.JLabel lblOrderTotal1;
    private javax.swing.JLabel lblTitle;
    private javax.swing.JLabel lblquantity;
    private javax.swing.JSpinner spnQuantity;
    private javax.swing.JTable tablOrderList;
    private javax.swing.JTable tblOrderDetailStatus;
    private javax.swing.JTable tblRequiementList;
    private javax.swing.JTextField txtMessage;
    // End of variables declaration//GEN-END:variables
    
    
    
    private void populateRequirementTable() {
        DefaultTableModel model = (DefaultTableModel) tblRequiementList.getModel();
        model.setRowCount(0);
        for(Requirement re:brandCompany.getProductPlanningOrganization().getRequirementDirectory().getRequirementsDirectory()){
            Object row[] = new Object[8];
            row[0] = re;
            row[1] = re.getRowMaterial();
            row[2] = re.getProductionMode();
            row[3] = re.getDesignerProfile().getPerson().getPersonName();
            row[4] = re.getStyle();
            row[5] = re.getColor();
            row[6] = re.getDeadline();
            row[7] = re.getRequirementstatus();
            model.addRow(row);
            }    
    }


    private void populateUnplacedOrderTable() {
        DefaultTableModel model = (DefaultTableModel) tblOrderDetailStatus.getModel();
        model.setRowCount(0);
        for(Requirement re:brandCompany.getProductPlanningOrganization().getRequirementDirectory().getRequirementsDirectory()){
            for(Order order:re.getRequirementOrderList()){
            Object row[] = new Object[7];
            row[0] = order;
            row[1] = order.getOrderstatus();
            row[2] = order.getRawMarerialOrder();
            row[3] = order.getRawMarerialOrder().getDeliverStatus();
            row[4] = order.getProductOrder();
            row[5] = order.getProductOrder().getProductionOrderStatus();
            row[6] = order.getRawMarerialOrder().getDeliveryDate();
            model.addRow(row);
            }
            }
    }

    private void populateOrderDetailStatus(Requirement requirement) {
        DefaultTableModel model = (DefaultTableModel) tblOrderDetailStatus.getModel();
        model.setRowCount(0);
        for(Order order:requirement.getRequirementOrderList()){
            Object row[] = new Object[7];
            row[0] = order;
            row[1] = order.getOrderstatus();
            row[2] = order.getRawMarerialOrder();
            row[3] = order.getRawMarerialOrder().getDeliverStatus();
            row[4] = order.getProductOrder();
            row[5] = order.getProductOrder().getProductionOrderStatus();
            row[6] = order.getRawMarerialOrder().getDeliveryDate();
            model.addRow(row);
            }
    }

    private void populateOrderList() {
        DefaultTableModel model = (DefaultTableModel) tablOrderList.getModel();
        model.setRowCount(0);
        for(Requirement re:brandCompany.getProductPlanningOrganization().getRequirementDirectory().getRequirementsDirectory()){
            for(Order order:re.getRequirementOrderList()){
                Object row[] = new Object[4];
                row[0] = order;
                row[1] = order.getQuantity();
                row[2] = order.getOrderPrice();
                row[3] = order.getOrderMessage();
                model.addRow(row);
                }
            }
    }

    private void populateOrderList(Requirement requirement) {
       DefaultTableModel model = (DefaultTableModel) tablOrderList.getModel();
        model.setRowCount(0);    
        for(Order order:requirement.getRequirementOrderList()){
            Object row[] = new Object[4];
            row[0] = order;
            row[1] = order.getQuantity();
            row[2] = order.getOrderPrice();
            row[3] = order.getOrderMessage();
            model.addRow(row);
            }
           
    }

    private void populateUnplacedOrderReuiqrementTable() {
        DefaultTableModel model = (DefaultTableModel) tblRequiementList.getModel();
        model.setRowCount(0);
        for(Requirement re:brandCompany.getProductPlanningOrganization().getRequirementDirectory().getRequirementsDirectory()){
            if(re.getRequirementstatus()=="Approved,waiting place order!"){
                Object row[] = new Object[8];
                row[0] = re;
                row[1] = re.getRowMaterial();
                row[2] = re.getProductionMode();
                row[3] = re.getDesignerProfile().getPerson().getPersonName();
                row[4] = re.getStyle();
                row[5] = re.getColor();
                row[6] = re.getDeadline();
                row[7] = re.getRequirementstatus();
                model.addRow(row);
            }
            }   
    }

    private void populateProductionCompanyCombo() {
        cmbProductionCompany.removeAllItems();
        for (ProductionEnterprise productionEnterprise: b.getEnterpriseDirectory().getProductionEnterpriseList()){
            
            cmbProductionCompany.addItem(productionEnterprise);
                
        }   
    }

    private void populateUnfinishedOrderDetailsTable() {
        DefaultTableModel model = (DefaultTableModel) tblOrderDetailStatus.getModel();
        model.setRowCount(0);
        for(Requirement re:brandCompany.getProductPlanningOrganization().getRequirementDirectory().getRequirementsDirectory()){
            for(Order order:re.getRequirementOrderList()){
                if(order.getOrderstatus()!="Received"){
                    Object row[] = new Object[7];
                    row[0] = order;
                    row[1] = order.getOrderstatus();
                    row[2] = order.getRawMarerialOrder();
                    row[3] = order.getRawMarerialOrder().getDeliverStatus();
                    row[4] = order.getProductOrder();
                    row[5] = order.getProductOrder().getProductionOrderStatus();
                    row[6] = order.getRawMarerialOrder().getDeliveryDate();
                    model.addRow(row);
                }
            }
            }
    }

    private void populateRequirementUnfinishedOrderDetailsTable(Requirement requirement) {
        DefaultTableModel model = (DefaultTableModel) tblOrderDetailStatus.getModel();
        model.setRowCount(0);
            for(Order order:requirement.getRequirementOrderList()){
                if(order.getOrderstatus()=="Received"){
                    Object row[] = new Object[7];
                    row[0] = order;
                    row[1] = order.getOrderstatus();
                    row[2] = order.getRawMarerialOrder();
                    row[3] = order.getRawMarerialOrder().getDeliverStatus();
                    row[4] = order.getProductOrder();
                    row[5] = order.getProductOrder().getProductionOrderStatus();
                    row[6] = order.getRawMarerialOrder().getDeliveryDate();
                    model.addRow(row);
                }
            }
    }
  
}
